# Payment Router Platform GraphQL Queries and Mutations

# Query to get merchant details with gateways
query GetMerchantWithGateways($merchantCode: String!) {
  merchants(where: {merchant_code: {_eq: $merchantCode}}) {
    id
    merchant_code
    name
    email
    status
    webhook_url
    merchant_gateways(where: {is_active: {_eq: true}}) {
      id
      priority
      fee_percentage
      fee_fixed
      gateway {
        id
        gateway_code
        name
        provider
        status
        supported_methods
        supported_currencies
      }
    }
    routing_rules(where: {is_active: {_eq: true}}, order_by: {priority: asc}) {
      id
      name
      rule_type
      priority
      conditions
      actions
    }
  }
}

# Query to get transaction details
query GetTransaction($transactionRef: String!) {
  transactions(where: {transaction_ref: {_eq: $transactionRef}}) {
    id
    transaction_ref
    amount
    currency
    payment_method
    status
    gateway_transaction_id
    fees
    net_amount
    created_at
    updated_at
    merchant {
      name
      merchant_code
    }
    gateway {
      name
      provider
    }
    routing_attempts(order_by: {created_at: asc}) {
      attempt_number
      status
      error_message
      processing_time_ms
      gateway {
        name
      }
    }
  }
}

# Query to get gateway health metrics
query GetGatewayHealth($hours: Int = 24) {
  gateway_health_metrics(
    where: {
      created_at: {_gte: "now() - interval '$hours hours'"}
    }
    order_by: {created_at: desc}
  ) {
    gateway {
      id
      name
      provider
      status
    }
    success_rate
    average_response_time_ms
    total_transactions
    failed_transactions
    measurement_period_start
    measurement_period_end
  }
}

# Mutation to create a transaction
mutation CreateTransaction(
  $merchantId: uuid!
  $amount: numeric!
  $currency: currency_code!
  $paymentMethod: payment_method!
  $customerEmail: String
  $customerPhone: String
  $billingAddress: jsonb
  $metadata: jsonb
) {
  insert_transactions_one(
    object: {
      merchant_id: $merchantId
      amount: $amount
      currency: $currency
      payment_method: $paymentMethod
      customer_email: $customerEmail
      customer_phone: $customerPhone
      billing_address: $billingAddress
      metadata: $metadata
      transaction_ref: ""  # Will be generated by trigger
    }
  ) {
    id
    transaction_ref
    status
  }
}

# Mutation to update transaction status
mutation UpdateTransactionStatus(
  $transactionId: uuid!
  $status: transaction_status!
  $gatewayTransactionId: String
  $gatewayResponse: jsonb
) {
  update_transactions_by_pk(
    pk_columns: {id: $transactionId}
    _set: {
      status: $status
      gateway_transaction_id: $gatewayTransactionId
      gateway_response: $gatewayResponse
    }
  ) {
    id
    status
    updated_at
  }
}

# Mutation to create routing attempt
mutation CreateRoutingAttempt(
  $transactionId: uuid!
  $gatewayId: uuid!
  $attemptNumber: Int!
  $status: transaction_status!
  $requestPayload: jsonb
  $responsePayload: jsonb
  $errorMessage: String
  $processingTimeMs: Int
) {
  insert_routing_attempts_one(
    object: {
      transaction_id: $transactionId
      gateway_id: $gatewayId
      attempt_number: $attemptNumber
      status: $status
      request_payload: $requestPayload
      response_payload: $responsePayload
      error_message: $errorMessage
      processing_time_ms: $processingTimeMs
    }
  ) {
    id
    created_at
  }
}

# Mutation to log webhook
mutation LogWebhook(
  $source: String!
  $gatewayId: uuid
  $merchantId: uuid
  $transactionId: uuid
  $eventType: String!
  $payload: jsonb!
) {
  insert_webhooks_one(
    object: {
      source: $source
      gateway_id: $gatewayId
      merchant_id: $merchantId
      transaction_id: $transactionId
      event_type: $eventType
      payload: $payload
    }
  ) {
    id
    created_at
  }
}

# Subscription to monitor transaction status
subscription MonitorTransaction($transactionRef: String!) {
  transactions(where: {transaction_ref: {_eq: $transactionRef}}) {
    id
    status
    gateway_transaction_id
    updated_at
    routing_attempts(order_by: {created_at: desc}, limit: 1) {
      status
      error_message
      gateway {
        name
      }
    }
  }
}

# Action to process payment
mutation ProcessPayment(
  $transactionId: uuid!
  $routingStrategy: String = "default"
) {
  processPayment(
    transactionId: $transactionId
    routingStrategy: $routingStrategy
  ) {
    success
    message
    transactionId
    gatewayUsed
    gatewayTransactionId
  }
}

# Action to refund transaction
mutation RefundTransaction(
  $transactionId: uuid!
  $amount: numeric
  $reason: String
) {
  refundTransaction(
    transactionId: $transactionId
    amount: $amount
    reason: $reason
  ) {
    success
    message
    refundId
    refundAmount
  }
}